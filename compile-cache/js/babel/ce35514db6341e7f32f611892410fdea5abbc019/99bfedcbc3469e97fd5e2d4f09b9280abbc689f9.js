function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var badPath = path.join(__dirname, 'fixtures', 'bad.css');
var goodPath = path.join(__dirname, 'fixtures', 'good.css');
var invalidPath = path.join(__dirname, 'fixtures', 'invalid.css');
var emptyPath = path.join(__dirname, 'fixtures', 'empty.css');
var projectPath = path.join(__dirname, 'fixtures', 'project');
var projectBadPath = path.join(projectPath, 'files', 'badWC.css');

describe('The csslint provider for Linter', function () {
  var lint = require('../lib/main').provideLinter().lint;

  beforeEach(function () {
    atom.workspace.destroyActivePaneItem();
    waitsForPromise(function () {
      atom.packages.activatePackage('linter-csslint');
      return atom.packages.activatePackage('language-css').then(function () {
        return atom.workspace.open(goodPath);
      });
    });
  });

  describe('checks bad.css and', function () {
    var editor = null;
    beforeEach(function () {
      return waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies the first message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Warning');
          expect(messages[0].text).toBe('Rule is empty.');
          expect(messages[0].filePath).toBe(badPath);
          expect(messages[0].range).toEqual([[0, 0], [0, 0]]);
        });
      });
    });
  });

  describe('warns on invalid CSS', function () {
    var editor = null;
    beforeEach(function () {
      return waitsForPromise(function () {
        return atom.workspace.open(invalidPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBe(1);
        });
      });
    });

    it('verifies the message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Error');
          expect(messages[0].text).toBe('Unexpected token \'}\' at line 1, col 1.');
          expect(messages[0].filePath).toBe(invalidPath);
          expect(messages[0].range).toEqual([[0, 0], [0, 0]]);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    return waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('handles an empty file', function () {
    return waitsForPromise(function () {
      return atom.workspace.open(emptyPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('respects .csslintrc configurations at the project root', function () {
    atom.project.addPath(projectPath);
    waitsForPromise(function () {
      return atom.workspace.open(projectBadPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
          expect(messages[0].text).toBeDefined();
          expect(messages[0].text).toEqual('Rule is empty.');
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/jakob/.atom/packages/linter-csslint/spec/linter-csslint-spec.js
