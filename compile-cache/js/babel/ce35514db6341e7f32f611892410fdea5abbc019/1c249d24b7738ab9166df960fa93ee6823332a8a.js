Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _treeViewGitRepositoryJs = require('./tree-view-git-repository.js');

var _treeViewGitRepositoryJs2 = _interopRequireDefault(_treeViewGitRepositoryJs);

/* eslint-disable vars-on-top */
'use babel';
var config = {
  location: {
    description: 'Location of the items in the tree view.<br>Top: all at the top of the tree view.<br>Before: before the corresponding project directory.<br>Inside: as the first item in the corresponding project directory, this is the default.',
    type: 'string',
    'default': 'inside',
    'enum': ['top', 'before', 'inside']
  },
  separator: {
    description: 'Draw a separator between a project and the next branch list. Does nothing when the "location" setting is "top".',
    type: 'boolean',
    'default': false
  }
};

exports.config = config;
var disposables;

// maps repositories to their respective view
var treeViewGitRepositories = new Map();
/* eslint-enable vars-on-top */

// remove old repositories
function removeOldRepositories(currentRepositories) {
  for (var repository of treeViewGitRepositories.keys()) {
    if (currentRepositories.indexOf(repository) == -1) {
      treeViewGitRepositories.get(repository).destroy();
      treeViewGitRepositories['delete'](repository);
    }
  }
}

// update tracked repositories and add new ones
function updateRepositories(currentRepositories, treeViewEl) {
  currentRepositories.forEach(function (repository, i) {
    var treeViewGitRepository = undefined;

    // skip if project root isn't a git repository
    if (!repository) {
      return;
    }

    try {
      treeViewGitRepository = treeViewGitRepositories.get(repository);
      treeViewGitRepository.update(treeViewEl);
    } catch (e) {
      treeViewGitRepository = (0, _treeViewGitRepositoryJs2['default'])(repository, treeViewEl);
      treeViewGitRepositories.set(repository, treeViewGitRepository);
    }

    treeViewGitRepository.setSeparator(i);
  });
}

function update(treeViewEl) {
  Promise.all(atom.project.getDirectories().map(atom.project.repositoryForDirectory.bind(atom.project))).then(function (repositories) {
    removeOldRepositories(repositories);
    updateRepositories(repositories, treeViewEl);
  });
}

function activate() {
  // resolves with the tree view package
  // object if and when it is loaded, or
  // with false if it isn't
  Promise.resolve(atom.packages.isPackageLoaded('tree-view') && atom.packages.activatePackage('tree-view')).then(function (treeViewPkg) {
    var treeViewEl = atom.views.getView(treeViewPkg.mainModule.createView());

    // do nothing if the tree view packages isn't loaded
    if (!treeViewPkg) {
      atom.notifications.addError('tree-view package not loaded', {
        detail: 'tree-view-git-branch requires the tree view package to be loaded'
      });
      return;
    }

    disposables = new _atom.CompositeDisposable(atom.project.onDidChangePaths(function () {
      return update(treeViewEl);
    }), atom.commands.add('atom-workspace', 'tree-view-git-branch:reload', function () {
      return update(treeViewEl);
    }), atom.config.onDidChange('tree-view-git-branch.location', function () {
      return update(treeViewEl);
    }), atom.config.onDidChange('tree-view-git-branch.separator', function () {
      return update(treeViewEl);
    }));

    update(treeViewEl);
  })['catch'](function (error) {
    return console.error(error.message, error.stack);
  });
}

function deactivate() {
  disposables.dispose();
  disposables = null;
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/jakob/.atom/packages/tree-view-git-branch/lib/main.js
