'use babel';

var GitCommitView = require('./git-commit-view');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var _require2 = require('react-for-atom');

var React = _require2.React;
var ReactDOM = _require2.ReactDOM;

var CommitManagerView = require('./components/CommitManagerView.jsx');

var _require3 = require('child_process');

var exec = _require3.exec;

module.exports = GitCommit = {
  gitCommitView: null,
  modalPanel: null,
  subscriptions: null,

  activate: function activate(state) {
    var _this = this;

    this.gitCommitView = new GitCommitView(state.gitCommitViewState);
    this.gitCommitViewElement = this.gitCommitView.getElement();
    this.gitCommitViewElement.onkeydown = function (e) {
      var ctrlDown = e.ctrlKey || e.metaKey;
      if (e.which == 27) {
        // esc
        _this.toggle();
      } else if (e.which == 13) {
        //enter
        _this.toggle();
        _this.save();
      }
    };
    this.modalPanel = atom.workspace.addModalPanel({ item: this.gitCommitViewElement, visible: false });
    this.rootComponent = ReactDOM.render(React.createElement(CommitManagerView, null), this.gitCommitViewElement);
    //Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable
    this.subscriptions = new CompositeDisposable();

    //Register command that toggles this view
    this.subscriptions.add(atom.commands.add('atom-workspace', { 'git-commit:commit': function gitCommitCommit() {
        _this.toggle();
      } }));
  },

  deactivate: function deactivate() {
    this.modalPanel.destroy();
    this.subscriptions.dispose();
    this.gitCommitView.destroy();
  },

  consumeToolBar: function consumeToolBar(toolBar) {
    this.toolBar = toolBar('git-commit');

    // Adding spacer
    this.toolBar.addSpacer();

    // Using custom icon set (Ionicons)
    var commitButton = this.toolBar.addButton({
      icon: 'stagecommit',
      callback: 'git-commit:commit',
      tooltip: 'Commit',
      iconset: 'icon-git'
    });

    // Adding spacer
    this.toolBar.addSpacer();

    this.toolBar.onDidDestroy = function () {
      this.toolBar = null;
    };
  },

  serialize: function serialize() {
    return { gitCommitViewState: this.gitCommitView.serialize() };
  },
  getRepoPath: function getRepoPath() {
    var parentFolders = [];
    var parentFolder = atom.workspace.getActivePaneItem().buffer.file.getParent();
    while (parentFolder.getBaseName() != "") {
      parentFolders.push(parentFolder);
      parentFolder = parentFolder.getParent();
    }
    var existsPromises = parentFolders.map(function (path) {
      return new Promise(function (resolve, reject) {
        path.getSubdirectory(".git").exists().then(function (subdirectoryExists) {
          resolve(subdirectoryExists);
        });
      });
    });
    return Promise.all(existsPromises).then(function (results) {
      return parentFolders[results.findIndex(function (exists) {
        return exists;
      })].getPath();
    });
    // return atom.project.getPaths()[0];
  },
  execCommandInLocalProject: function execCommandInLocalProject(command, cwd) {
    return new Promise(function (resolve, reject) {
      exec(command, { cwd: cwd }, function (err, stdout, stderr) {
        if (err) reject(stderr);else resolve(stdout);
      });
    });
  },
  execCommandInRemoteProject: function execCommandInRemoteProject(command, path) {
    var node_ssh = require('node-ssh');
    var ssh = new node_ssh();
    var host = path.split("/")[2].split(":")[0];
    var workingPath = "/".concat(path.split("/").slice(3).join("/"));
    var nuclideConfig = atom.packages.config.get("nuclide");
    if (!nuclideConfig) {
      return;
    }
    var profile = nuclideConfig.connectionProfiles.find(function (profile) {
      return profile.params.server == host;
    });
    if (!profile) {
      return;
    }
    var privateKey;
    if (profile.params.authMethod == "PRIVATE_KEY") {
      privateKey = profile.params.pathToPrivateKey;
    } else {
      return;
    }
    var port = profile.params.sshPort;
    var username = profile.params.username;

    return new Promise(function (resolve, reject) {
      console.log(host, username, privateKey);
      ssh.connect({
        host: host,
        username: username,
        privateKey: privateKey
      }).then(function () {
        ssh.execCommand(command, { cwd: workingPath, stream: 'both', stdin: null }).then(function (result) {
          console.log('STDOUT: ' + result.stdout);
          console.log('STDERR: ' + result.stderr);
          ssh.end();
          if (result.code != 0) reject(result.stderr + " " + result.stdout);else resolve(result.stdout);
        });
      })['catch'](function (error) {
        ssh.end();
        reject(error);
      });
    });
  },
  execCommandInProject: function execCommandInProject(command) {
    var _this2 = this;

    return this.getRepoPath().then(function (path) {
      if (path.startsWith("nuclide")) {
        return _this2.execCommandInRemoteProject(command, path);
      } else {
        return _this2.execCommandInLocalProject(command, path);
      }
    });
  },
  getUncommitedFiles: function getUncommitedFiles() {
    var _this3 = this;

    return new Promise(function (resolve, reject) {
      _this3.execCommandInProject('git status -s').then(function (stdout) {
        resolve(stdout.split("\n").filter(function (path) {
          return path != "";
        }).filter(function (modif) {
          var modifier = modif.split(' ').filter(function (m) {
            return m != "";
          })[0];
          return modifier.indexOf("??") != -1 || modifier.indexOf("M") != -1;
        }).map(function (modif) {
          return modif.split(' ').filter(function (m) {
            return m != "";
          }).slice(1).join(' ');
        }).map(function (path) {
          var length = path.split(' ').length;
          if (length == 3) return path.split(' ')[2];else if (length > 1) return path.split(' ')[0];else return path;
        }));
      })['catch'](function (stderr) {
        reject(stderr);
      });
    });
  },
  addFiles: function addFiles() {
    var gitAddCommand = 'git add ' + this.rootComponent.getFilesToAdd().map(function (file) {
      return file;
    }).join(' ');
    return this.execCommandInProject(gitAddCommand);
  },
  commit: function commit() {
    var _this4 = this;

    return new Promise(function (resolve, reject) {
      _this4.execCommandInProject('git commit -m "' + _this4.rootComponent.refs.inputText.value + '"').then(function (stdout) {
        _this4.rootComponent.refs.inputText.value = "";
        resolve(stdout);
      })['catch'](function (stderr) {
        reject(stderr);
      });
    });
  },
  save: function save() {
    var _this5 = this;

    this.addFiles().then(function () {
      _this5.commit().then(function (stdout) {
        atom.notifications.addSuccess("Commited with success", {
          detail: stdout,
          dismissable: false
        });
      })['catch'](function (err) {
        atom.notifications.addWarning("Files have been staged");
        atom.notifications.addError("Error while commiting", {
          detail: err,
          dismissable: true
        });
      });
    })['catch'](function (err) {
      atom.notifications.addError("Error while staging files", {
        detail: err,
        dismissable: true
      });
    });
  },
  toggle: function toggle() {
    var _this6 = this;

    if (this.modalPanel.isVisible()) this.modalPanel.hide();else {
      this.getUncommitedFiles().then(function (files) {
        if (files.length > 0) {
          var filesProperties = files.map(function (file) {
            return { name: file };
          });
          _this6.rootComponent = ReactDOM.render(React.createElement(CommitManagerView, { files: filesProperties }), _this6.gitCommitViewElement);
          _this6.modalPanel.show();
          _this6.rootComponent.refs.inputText.focus();
        } else {
          atom.notifications.addWarning("No file to stage");
        }
      })['catch'](function (err) {
        atom.notifications.addError("Error while getting status", {
          detail: err,
          dismissable: true
        });
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/jakob/.atom/packages/git-commit/lib/git-commit.js
