(function() {
  var TreeViewGitStatus, fs, path, temp;

  TreeViewGitStatus = require('../lib/main');

  fs = require('fs-plus');

  path = require('path');

  temp = require('temp').track();

  describe("TreeViewGitStatus", function() {
    var extractGitRepoFixture, fixturesPath, gitStatus, treeView, validateProjectPaths, workspaceElement, _ref;
    _ref = [], workspaceElement = _ref[0], gitStatus = _ref[1], treeView = _ref[2], fixturesPath = _ref[3];
    beforeEach(function() {
      fixturesPath = atom.project.getPaths()[0];
      atom.project.removePath(fixturesPath);
      workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
      return waitsForPromise(function() {
        return atom.packages.activatePackage('tree-view-git-status').then(function(pkg) {
          gitStatus = pkg.mainModule;
          treeView = gitStatus.treeView;
          return gitStatus.ignoreRepository((path.resolve(fixturesPath, '..', '..').split(path.sep)).join('/'));
        });
      });
    });
    afterEach(function() {
      return temp.cleanup();
    });
    it('activates the TreeViewGitStatus package', function() {
      expect(gitStatus).toBeDefined();
      return expect(gitStatus.treeView).toBeDefined();
    });
    it('adds valid Git repositories to the repository map', function() {
      var projPaths;
      projPaths = [extractGitRepoFixture(fixturesPath, 'git-project')];
      atom.project.setPaths(projPaths);
      validateProjectPaths(projPaths);
      expect(gitStatus.toggled).toBe(true);
      expect(atom.project.getRepositories().length).toBe(1);
      return expect(gitStatus.repositoryMap.size).toBe(1);
    });
    it('disables the TreeViewGitStatus when toggled', function() {
      var projPaths, root, rootPath, _i, _j, _len, _len1, _ref1, _ref2;
      projPaths = [extractGitRepoFixture(fixturesPath, 'git-project')];
      atom.project.setPaths(projPaths);
      validateProjectPaths(projPaths);
      expect(gitStatus.toggled).toBe(true);
      expect(gitStatus.repositoryMap.size).toBe(1);
      _ref1 = treeView.roots;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        root = _ref1[_i];
        rootPath = gitStatus.normalizePath(root.directoryName.dataset.path);
        expect(gitStatus.repositoryMap.keys().next().value).toBe(rootPath);
        expect(gitStatus.repositoryMap.has(rootPath)).toBe(true);
        expect(root.header.querySelector('span.tree-view-git-status')).toExist();
      }
      gitStatus.toggle();
      _ref2 = treeView.roots;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        root = _ref2[_j];
        expect(root.header.querySelector('span.tree-view-git-status')).not.toExist();
      }
      expect(gitStatus.toggled).toBe(false);
      expect(gitStatus.subscriptions.disposed).toBe(true);
      expect(gitStatus.repositorySubscriptions.disposed).toBe(true);
      expect(gitStatus.repositoryMap.size).toBe(0);
      return expect(gitStatus.ignoredRepositories.size).not.toBeNull();
    });
    it('skips adding the TreeViewGitStatus on none Git projects', function() {
      var projPaths, root, _i, _len, _ref1, _results;
      projPaths = [path.join(fixturesPath, 'none-git-project')];
      atom.project.setPaths(projPaths);
      validateProjectPaths(projPaths);
      expect(gitStatus.toggled).toBe(true);
      _ref1 = treeView.roots;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        root = _ref1[_i];
        _results.push(expect(root.header.querySelector('span.tree-view-git-status')).not.toExist());
      }
      return _results;
    });
    describe('when deactivated', function() {
      beforeEach(function() {
        var projPaths;
        projPaths = [extractGitRepoFixture(fixturesPath, 'git-project')];
        atom.project.setPaths(projPaths);
        validateProjectPaths(projPaths);
        expect(gitStatus.toggled).toBe(true);
        expect(atom.project.getRepositories().length).toBe(1);
        return runs(function() {
          return gitStatus.deactivate();
        });
      });
      it('destroys the TreeViewGitStatus instance', function() {
        expect(gitStatus.active).toBe(false);
        expect(gitStatus.toggled).toBe(false);
        expect(gitStatus.subscriptions).toBeNull();
        expect(gitStatus.treeView).toBeNull();
        expect(gitStatus.repositorySubscriptions).toBeNull();
        expect(gitStatus.treeViewRootsMap).toBeNull();
        expect(gitStatus.repositoryMap).toBeNull();
        return expect(gitStatus.ignoredRepositories).toBeNull();
      });
      it('destroys the Git Status elements that were added to the DOM', function() {
        var root, _i, _len, _ref1, _results;
        _ref1 = treeView.roots;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          root = _ref1[_i];
          _results.push(expect(root.header.querySelector('span.tree-view-git-status')).not.toExist());
        }
        return _results;
      });
      return it('removes the Git Status CSS classes that were added to the DOM', function() {
        var root, _i, _len, _ref1, _results;
        _ref1 = treeView.roots;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          root = _ref1[_i];
          expect(root.classList.contains('status-modified')).toBe(false);
          _results.push(expect(root.classList.contains('status-added')).toBe(false));
        }
        return _results;
      });
    });
    extractGitRepoFixture = function(fixturesPath, dotGitFixture) {
      var dotGit, dotGitFixturePath;
      dotGitFixturePath = path.join(fixturesPath, dotGitFixture, 'git.git');
      dotGit = path.join(temp.mkdirSync('repo'), '.git');
      fs.copySync(dotGitFixturePath, dotGit);
      return path.resolve(dotGit, '..');
    };
    return validateProjectPaths = function(projPaths) {
      var pPath, _i, _len, _ref1;
      expect(atom.project.getPaths().length).toBe(projPaths.length);
      _ref1 = atom.project.getPaths();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pPath = _ref1[_i];
        expect(projPaths.indexOf(pPath)).toBeGreaterThan(-1);
      }
      return expect(treeView.roots.length).toBe(projPaths.length);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/jakob/.atom/packages/tree-view-git-status/spec/tree-view-git-status-spec.coffee
